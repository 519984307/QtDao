/*This file is auto generated by DbEntityGenerator*/
#pragma once

#include <qobject.h>
#include <qvariant.h>
#include <qdatetime.h>
#include <qjsonobject.h>

#include "condition/EntityField.h"

class MysqlDefaultTestStr {
private:
    //
    QChar typechar;
    //
    QChar typecharnull;
    //
    QString typevarchar;
    //
    QString typevarchar2;
    //
    QString typevarchar3;
    //
    QString typevarchar4;
    //
    QString typevarchar5;
    //
    QString typetext;
    //
    QString typetext2;
    //
    QString typetext3;
    //
    QString typetext4;
    //
    QString typetext5;
    //
    QByteArray typeblob;
    //
    QByteArray typeblob2;
    //
    QByteArray typeblob3;
    //
    QByteArray typeblob4;
    //
    QByteArray typeblob5;

    QHash<QString, QVariant> __extra;

public:

    MysqlDefaultTestStr() {
        typechar = 'a';
        typecharnull = QChar();
        typevarchar = "string";
        typevarchar2 = QString();
        typevarchar3 = QString();
        typevarchar4 = "null";
        typevarchar5 = QString("string");
        typetext = "string";
        typetext2 = QString();
        typetext3 = QString();
        typetext4 = "null";
        typetext5 = QString("string");
        typeblob = "string";
        typeblob2 = QByteArray();
        typeblob3 = QByteArray();
        typeblob4 = "null";
        typeblob5 = QByteArray("string");
    }

    MysqlDefaultTestStr(
        const QChar& typechar,
        const QChar& typecharnull,
        const QString& typevarchar,
        const QString& typevarchar2,
        const QString& typevarchar3,
        const QString& typevarchar4,
        const QString& typevarchar5,
        const QString& typetext,
        const QString& typetext2,
        const QString& typetext3,
        const QString& typetext4,
        const QString& typetext5,
        const QByteArray& typeblob,
        const QByteArray& typeblob2,
        const QByteArray& typeblob3,
        const QByteArray& typeblob4,
        const QByteArray& typeblob5
    ) : typechar(typechar)
    , typecharnull(typecharnull)
    , typevarchar(typevarchar)
    , typevarchar2(typevarchar2)
    , typevarchar3(typevarchar3)
    , typevarchar4(typevarchar4)
    , typevarchar5(typevarchar5)
    , typetext(typetext)
    , typetext2(typetext2)
    , typetext3(typetext3)
    , typetext4(typetext4)
    , typetext5(typetext5)
    , typeblob(typeblob)
    , typeblob2(typeblob2)
    , typeblob3(typeblob3)
    , typeblob4(typeblob4)
    , typeblob5(typeblob5)
    {
    }

public:
    class Fields {
    public:
        EntityField<QChar> typechar = EntityField<QChar>("typechar", "ts_mysqldefaultteststr");
        EntityField<QChar> typecharnull = EntityField<QChar>("typecharnull", "ts_mysqldefaultteststr");
        EntityField<QString> typevarchar = EntityField<QString>("typevarchar", "ts_mysqldefaultteststr");
        EntityField<QString> typevarchar2 = EntityField<QString>("typevarchar2", "ts_mysqldefaultteststr");
        EntityField<QString> typevarchar3 = EntityField<QString>("typevarchar3", "ts_mysqldefaultteststr");
        EntityField<QString> typevarchar4 = EntityField<QString>("typevarchar4", "ts_mysqldefaultteststr");
        EntityField<QString> typevarchar5 = EntityField<QString>("typevarchar5", "ts_mysqldefaultteststr");
        EntityField<QString> typetext = EntityField<QString>("typetext", "ts_mysqldefaultteststr");
        EntityField<QString> typetext2 = EntityField<QString>("typetext2", "ts_mysqldefaultteststr");
        EntityField<QString> typetext3 = EntityField<QString>("typetext3", "ts_mysqldefaultteststr");
        EntityField<QString> typetext4 = EntityField<QString>("typetext4", "ts_mysqldefaultteststr");
        EntityField<QString> typetext5 = EntityField<QString>("typetext5", "ts_mysqldefaultteststr");
        EntityField<QByteArray> typeblob = EntityField<QByteArray>("typeblob", "ts_mysqldefaultteststr");
        EntityField<QByteArray> typeblob2 = EntityField<QByteArray>("typeblob2", "ts_mysqldefaultteststr");
        EntityField<QByteArray> typeblob3 = EntityField<QByteArray>("typeblob3", "ts_mysqldefaultteststr");
        EntityField<QByteArray> typeblob4 = EntityField<QByteArray>("typeblob4", "ts_mysqldefaultteststr");
        EntityField<QByteArray> typeblob5 = EntityField<QByteArray>("typeblob5", "ts_mysqldefaultteststr");

    protected:
        void reset(const QString& tbName) {
            typechar = EntityField<QChar>("typechar", tbName);
            typecharnull = EntityField<QChar>("typecharnull", tbName);
            typevarchar = EntityField<QString>("typevarchar", tbName);
            typevarchar2 = EntityField<QString>("typevarchar2", tbName);
            typevarchar3 = EntityField<QString>("typevarchar3", tbName);
            typevarchar4 = EntityField<QString>("typevarchar4", tbName);
            typevarchar5 = EntityField<QString>("typevarchar5", tbName);
            typetext = EntityField<QString>("typetext", tbName);
            typetext2 = EntityField<QString>("typetext2", tbName);
            typetext3 = EntityField<QString>("typetext3", tbName);
            typetext4 = EntityField<QString>("typetext4", tbName);
            typetext5 = EntityField<QString>("typetext5", tbName);
            typeblob = EntityField<QByteArray>("typeblob", tbName);
            typeblob2 = EntityField<QByteArray>("typeblob2", tbName);
            typeblob3 = EntityField<QByteArray>("typeblob3", tbName);
            typeblob4 = EntityField<QByteArray>("typeblob4", tbName);
            typeblob5 = EntityField<QByteArray>("typeblob5", tbName);
        }
    };

    struct Info {
        enum {
            Attach = 1
        };

        static int fieldSize() {
            return 17;
        }

        static QString getTableName() {
            return QStringLiteral("ts_mysqldefaultteststr");
        }

        static QString getSourceName() {
            return getTableName();
        }

        static QString getTableEngine() {
            return QString();
        }

        static QStringList getFields() {
            return QStringList()
                << "typechar"
                << "typecharnull"
                << "typevarchar"
                << "typevarchar2"
                << "typevarchar3"
                << "typevarchar4"
                << "typevarchar5"
                << "typetext"
                << "typetext2"
                << "typetext3"
                << "typetext4"
                << "typetext5"
                << "typeblob"
                << "typeblob2"
                << "typeblob3"
                << "typeblob4"
                << "typeblob5";
        }

        static QStringList getFieldsWithoutAutoIncrement() {
            return QStringList()
                << "typechar"
                << "typecharnull"
                << "typevarchar"
                << "typevarchar2"
                << "typevarchar3"
                << "typevarchar4"
                << "typevarchar5"
                << "typetext"
                << "typetext2"
                << "typetext3"
                << "typetext4"
                << "typetext5"
                << "typeblob"
                << "typeblob2"
                << "typeblob3"
                << "typeblob4"
                << "typeblob5";
        }

        static QStringList getFieldsType() {
            return QStringList() 
                << QStringLiteral("typechar char null default 'a' comment ''")
                << QStringLiteral("typecharnull char null default null comment ''")
                << QStringLiteral("typevarchar varchar(255) null default 'string' comment ''")
                << QStringLiteral("typevarchar2 varchar(255) null default null comment ''")
                << QStringLiteral("typevarchar3 varchar(255) null default '' comment ''")
                << QStringLiteral("typevarchar4 varchar(255) null default 'null' comment ''")
                << QStringLiteral("typevarchar5 varchar(255) null default null comment ''")
                << QStringLiteral("typetext tinytext null default null comment ''")
                << QStringLiteral("typetext2 text null default null comment ''")
                << QStringLiteral("typetext3 mediumtext null default null comment ''")
                << QStringLiteral("typetext4 longtext null default null comment ''")
                << QStringLiteral("typetext5 text null default null comment ''")
                << QStringLiteral("typeblob tinyblob null default null comment ''")
                << QStringLiteral("typeblob2 blob null default null comment ''")
                << QStringLiteral("typeblob3 mediumblob null default null comment ''")
                << QStringLiteral("typeblob4 longblob null default null comment ''")
                << QStringLiteral("typeblob5 blob null default null comment ''");
        }

        static QStringList getPrimaryKeys() {
            return QStringList();
        }

        static QList<QStringList> getIndexFields() {
            return QList<QStringList>();
        }

        static QList<QStringList> getUniqueIndexFields() {
            return QList<QStringList>();
        }

        static bool isAutoIncrement(const QString& name) {
            Q_UNUSED(name);
            return false;
        }
    };

    struct Tool {
        static QVariantList getValueWithoutAutoIncrement(const MysqlDefaultTestStr& entity) {
            return QVariantList()
                << entity.typechar
                << entity.typecharnull
                << entity.typevarchar
                << entity.typevarchar2
                << entity.typevarchar3
                << entity.typevarchar4
                << entity.typevarchar5
                << entity.typetext
                << entity.typetext2
                << entity.typetext3
                << entity.typetext4
                << entity.typetext5
                << entity.typeblob
                << entity.typeblob2
                << entity.typeblob3
                << entity.typeblob4
                << entity.typeblob5;
        }

        static QVariant getValueByName(const MysqlDefaultTestStr& entity, const QString& target) {
            if (target == "typechar") {
                return entity.typechar;
            }
            if (target == "typecharnull") {
                return entity.typecharnull;
            }
            if (target == "typevarchar") {
                return entity.typevarchar;
            }
            if (target == "typevarchar2") {
                return entity.typevarchar2;
            }
            if (target == "typevarchar3") {
                return entity.typevarchar3;
            }
            if (target == "typevarchar4") {
                return entity.typevarchar4;
            }
            if (target == "typevarchar5") {
                return entity.typevarchar5;
            }
            if (target == "typetext") {
                return entity.typetext;
            }
            if (target == "typetext2") {
                return entity.typetext2;
            }
            if (target == "typetext3") {
                return entity.typetext3;
            }
            if (target == "typetext4") {
                return entity.typetext4;
            }
            if (target == "typetext5") {
                return entity.typetext5;
            }
            if (target == "typeblob") {
                return entity.typeblob;
            }
            if (target == "typeblob2") {
                return entity.typeblob2;
            }
            if (target == "typeblob3") {
                return entity.typeblob3;
            }
            if (target == "typeblob4") {
                return entity.typeblob4;
            }
            if (target == "typeblob5") {
                return entity.typeblob5;
            }
            return entity.__extra.value(target);
        }

        static void bindAutoIncrementId(MysqlDefaultTestStr& entity, const QVariant& id) {
            Q_UNUSED(entity);
            Q_UNUSED(id);
        }

        static void bindValue(MysqlDefaultTestStr& entity, const QString& target, QVariant value) {
            if (target == "typechar") {
                entity.typechar = value.value<QChar>();
            } else if (target == "typecharnull") {
                entity.typecharnull = value.value<QChar>();
            } else if (target == "typevarchar") {
                entity.typevarchar = value.value<QString>();
            } else if (target == "typevarchar2") {
                entity.typevarchar2 = value.value<QString>();
            } else if (target == "typevarchar3") {
                entity.typevarchar3 = value.value<QString>();
            } else if (target == "typevarchar4") {
                entity.typevarchar4 = value.value<QString>();
            } else if (target == "typevarchar5") {
                entity.typevarchar5 = value.value<QString>();
            } else if (target == "typetext") {
                entity.typetext = value.value<QString>();
            } else if (target == "typetext2") {
                entity.typetext2 = value.value<QString>();
            } else if (target == "typetext3") {
                entity.typetext3 = value.value<QString>();
            } else if (target == "typetext4") {
                entity.typetext4 = value.value<QString>();
            } else if (target == "typetext5") {
                entity.typetext5 = value.value<QString>();
            } else if (target == "typeblob") {
                entity.typeblob = value.value<QByteArray>();
            } else if (target == "typeblob2") {
                entity.typeblob2 = value.value<QByteArray>();
            } else if (target == "typeblob3") {
                entity.typeblob3 = value.value<QByteArray>();
            } else if (target == "typeblob4") {
                entity.typeblob4 = value.value<QByteArray>();
            } else if (target == "typeblob5") {
                entity.typeblob5 = value.value<QByteArray>();
            } else {
                entity.__putExtra(target, value);
            }
        }

        static MysqlDefaultTestStr fromJson(const QJsonObject& object) {
            MysqlDefaultTestStr entity;
            entity.typechar = object.value("typechar").toVariant().value<QChar>();
            entity.typecharnull = object.value("typecharnull").toVariant().value<QChar>();
            entity.typevarchar = object.value("typevarchar").toVariant().value<QString>();
            entity.typevarchar2 = object.value("typevarchar2").toVariant().value<QString>();
            entity.typevarchar3 = object.value("typevarchar3").toVariant().value<QString>();
            entity.typevarchar4 = object.value("typevarchar4").toVariant().value<QString>();
            entity.typevarchar5 = object.value("typevarchar5").toVariant().value<QString>();
            entity.typetext = object.value("typetext").toVariant().value<QString>();
            entity.typetext2 = object.value("typetext2").toVariant().value<QString>();
            entity.typetext3 = object.value("typetext3").toVariant().value<QString>();
            entity.typetext4 = object.value("typetext4").toVariant().value<QString>();
            entity.typetext5 = object.value("typetext5").toVariant().value<QString>();
            entity.typeblob = QByteArray::fromBase64(object.value("typeblob").toString().toLatin1());
            entity.typeblob2 = QByteArray::fromBase64(object.value("typeblob2").toString().toLatin1());
            entity.typeblob3 = QByteArray::fromBase64(object.value("typeblob3").toString().toLatin1());
            entity.typeblob4 = QByteArray::fromBase64(object.value("typeblob4").toString().toLatin1());
            entity.typeblob5 = QByteArray::fromBase64(object.value("typeblob5").toString().toLatin1());
            return entity;
        }

        static QJsonObject toJson(const MysqlDefaultTestStr& entity, QStringList excludeKeys = QStringList()) {
            QJsonObject object;
            object.insert("typechar", entity.typechar.toLatin1());
            object.insert("typecharnull", entity.typecharnull.toLatin1());
            object.insert("typevarchar", entity.typevarchar);
            object.insert("typevarchar2", entity.typevarchar2);
            object.insert("typevarchar3", entity.typevarchar3);
            object.insert("typevarchar4", entity.typevarchar4);
            object.insert("typevarchar5", entity.typevarchar5);
            object.insert("typetext", entity.typetext);
            object.insert("typetext2", entity.typetext2);
            object.insert("typetext3", entity.typetext3);
            object.insert("typetext4", entity.typetext4);
            object.insert("typetext5", entity.typetext5);
            object.insert("typeblob", QString::fromLatin1(entity.typeblob.toBase64()));
            object.insert("typeblob2", QString::fromLatin1(entity.typeblob2.toBase64()));
            object.insert("typeblob3", QString::fromLatin1(entity.typeblob3.toBase64()));
            object.insert("typeblob4", QString::fromLatin1(entity.typeblob4.toBase64()));
            object.insert("typeblob5", QString::fromLatin1(entity.typeblob5.toBase64()));

            for (const auto& key : excludeKeys) {
                object.remove(key);
            }
            return object;
        }
    };

public:
    //
    inline void setTypechar(const QChar& typechar) {this->typechar = typechar;}
    //
    inline QChar getTypechar() const {return typechar;}
    //
    inline void setTypecharnull(const QChar& typecharnull) {this->typecharnull = typecharnull;}
    //
    inline QChar getTypecharnull() const {return typecharnull;}
    //
    inline void setTypevarchar(const QString& typevarchar) {this->typevarchar = typevarchar;}
    //
    inline QString getTypevarchar() const {return typevarchar;}
    //
    inline void setTypevarchar2(const QString& typevarchar2) {this->typevarchar2 = typevarchar2;}
    //
    inline QString getTypevarchar2() const {return typevarchar2;}
    //
    inline void setTypevarchar3(const QString& typevarchar3) {this->typevarchar3 = typevarchar3;}
    //
    inline QString getTypevarchar3() const {return typevarchar3;}
    //
    inline void setTypevarchar4(const QString& typevarchar4) {this->typevarchar4 = typevarchar4;}
    //
    inline QString getTypevarchar4() const {return typevarchar4;}
    //
    inline void setTypevarchar5(const QString& typevarchar5) {this->typevarchar5 = typevarchar5;}
    //
    inline QString getTypevarchar5() const {return typevarchar5;}
    //
    inline void setTypetext(const QString& typetext) {this->typetext = typetext;}
    //
    inline QString getTypetext() const {return typetext;}
    //
    inline void setTypetext2(const QString& typetext2) {this->typetext2 = typetext2;}
    //
    inline QString getTypetext2() const {return typetext2;}
    //
    inline void setTypetext3(const QString& typetext3) {this->typetext3 = typetext3;}
    //
    inline QString getTypetext3() const {return typetext3;}
    //
    inline void setTypetext4(const QString& typetext4) {this->typetext4 = typetext4;}
    //
    inline QString getTypetext4() const {return typetext4;}
    //
    inline void setTypetext5(const QString& typetext5) {this->typetext5 = typetext5;}
    //
    inline QString getTypetext5() const {return typetext5;}
    //
    inline void setTypeblob(const QByteArray& typeblob) {this->typeblob = typeblob;}
    //
    inline QByteArray getTypeblob() const {return typeblob;}
    //
    inline void setTypeblob2(const QByteArray& typeblob2) {this->typeblob2 = typeblob2;}
    //
    inline QByteArray getTypeblob2() const {return typeblob2;}
    //
    inline void setTypeblob3(const QByteArray& typeblob3) {this->typeblob3 = typeblob3;}
    //
    inline QByteArray getTypeblob3() const {return typeblob3;}
    //
    inline void setTypeblob4(const QByteArray& typeblob4) {this->typeblob4 = typeblob4;}
    //
    inline QByteArray getTypeblob4() const {return typeblob4;}
    //
    inline void setTypeblob5(const QByteArray& typeblob5) {this->typeblob5 = typeblob5;}
    //
    inline QByteArray getTypeblob5() const {return typeblob5;}
    //set temp data
    inline void __putExtra(const QString& key, const QVariant& extra) {this->__extra.insert(key, extra);}
    //get function select result, like get "as" field result
    inline QVariant __getExtra(const QString& key) const {return __extra.value(key);}
};
typedef QList<MysqlDefaultTestStr> MysqlDefaultTestStrList;
Q_DECLARE_METATYPE(MysqlDefaultTestStr);