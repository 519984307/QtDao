/*This file is auto generated by DbEntityGenerator*/
#pragma once

#include <qobject.h>
#include <qvariant.h>
#include <qdatetime.h>
#include <qjsonobject.h>

#include "condition/EntityField.h"

class SqlServerDefaultTestTime {
private:
    //
    QTime typetime;
    //
    QTime typetime2;
    //
    QTime typetime3;
    //
    QTime typetime4;
    //
    QDate typedate;
    //
    QDate typedate2;
    //
    QDate typedate3;
    //
    QDate typedate4;
    //
    QDateTime typedatetime;
    //
    QDateTime typedatetime2;
    //
    QDateTime typedatetime3;
    //
    QDateTime typedatetime4;
    //
    QByteArray typetimestamp;

    QHash<QString, QVariant> __extra;

public:

    SqlServerDefaultTestTime() {
        typetime = QTime::fromString("12:59:59.678");
        typetime2 = QTime::currentTime();
        typetime3 = QTime::currentTime();
        typetime4 = QTime();
        typedate = QDate::fromString("2020-01-01");
        typedate2 = QDate::currentDate();
        typedate3 = QDate::currentDate();
        typedate4 = QDate();
        typedatetime = QDateTime::fromString("2020-01-01 12:59:59.678");
        typedatetime2 = QDateTime::currentDateTime();
        typedatetime3 = QDateTime::currentDateTime();
        typedatetime4 = QDateTime();
        typetimestamp = QByteArray();
    }

    SqlServerDefaultTestTime(
        const QTime& typetime,
        const QTime& typetime2,
        const QTime& typetime3,
        const QTime& typetime4,
        const QDate& typedate,
        const QDate& typedate2,
        const QDate& typedate3,
        const QDate& typedate4,
        const QDateTime& typedatetime,
        const QDateTime& typedatetime2,
        const QDateTime& typedatetime3,
        const QDateTime& typedatetime4,
        const QByteArray& typetimestamp
    ) : typetime(typetime)
    , typetime2(typetime2)
    , typetime3(typetime3)
    , typetime4(typetime4)
    , typedate(typedate)
    , typedate2(typedate2)
    , typedate3(typedate3)
    , typedate4(typedate4)
    , typedatetime(typedatetime)
    , typedatetime2(typedatetime2)
    , typedatetime3(typedatetime3)
    , typedatetime4(typedatetime4)
    , typetimestamp(typetimestamp)
    {
    }

public:
    class Fields {
    public:
        EntityField<QTime> typetime = EntityField<QTime>("typetime", "ts_sqlserverdefaulttesttime");
        EntityField<QTime> typetime2 = EntityField<QTime>("typetime2", "ts_sqlserverdefaulttesttime");
        EntityField<QTime> typetime3 = EntityField<QTime>("typetime3", "ts_sqlserverdefaulttesttime");
        EntityField<QTime> typetime4 = EntityField<QTime>("typetime4", "ts_sqlserverdefaulttesttime");
        EntityField<QDate> typedate = EntityField<QDate>("typedate", "ts_sqlserverdefaulttesttime");
        EntityField<QDate> typedate2 = EntityField<QDate>("typedate2", "ts_sqlserverdefaulttesttime");
        EntityField<QDate> typedate3 = EntityField<QDate>("typedate3", "ts_sqlserverdefaulttesttime");
        EntityField<QDate> typedate4 = EntityField<QDate>("typedate4", "ts_sqlserverdefaulttesttime");
        EntityField<QDateTime> typedatetime = EntityField<QDateTime>("typedatetime", "ts_sqlserverdefaulttesttime");
        EntityField<QDateTime> typedatetime2 = EntityField<QDateTime>("typedatetime2", "ts_sqlserverdefaulttesttime");
        EntityField<QDateTime> typedatetime3 = EntityField<QDateTime>("typedatetime3", "ts_sqlserverdefaulttesttime");
        EntityField<QDateTime> typedatetime4 = EntityField<QDateTime>("typedatetime4", "ts_sqlserverdefaulttesttime");
        EntityField<QByteArray> typetimestamp = EntityField<QByteArray>("typetimestamp", "ts_sqlserverdefaulttesttime");

    protected:
        void reset(const QString& tbName) {
            typetime = EntityField<QTime>("typetime", tbName);
            typetime2 = EntityField<QTime>("typetime2", tbName);
            typetime3 = EntityField<QTime>("typetime3", tbName);
            typetime4 = EntityField<QTime>("typetime4", tbName);
            typedate = EntityField<QDate>("typedate", tbName);
            typedate2 = EntityField<QDate>("typedate2", tbName);
            typedate3 = EntityField<QDate>("typedate3", tbName);
            typedate4 = EntityField<QDate>("typedate4", tbName);
            typedatetime = EntityField<QDateTime>("typedatetime", tbName);
            typedatetime2 = EntityField<QDateTime>("typedatetime2", tbName);
            typedatetime3 = EntityField<QDateTime>("typedatetime3", tbName);
            typedatetime4 = EntityField<QDateTime>("typedatetime4", tbName);
            typetimestamp = EntityField<QByteArray>("typetimestamp", tbName);
        }
    };

    struct Info {
        enum {
            Attach = 1
        };

        static int fieldSize() {
            return 13;
        }

        static QString getTableName() {
            return QStringLiteral("ts_sqlserverdefaulttesttime");
        }

        static QString getSourceName() {
            return getTableName();
        }

        static QStringList getFields() {
            return QStringList()
                << "typetime"
                << "typetime2"
                << "typetime3"
                << "typetime4"
                << "typedate"
                << "typedate2"
                << "typedate3"
                << "typedate4"
                << "typedatetime"
                << "typedatetime2"
                << "typedatetime3"
                << "typedatetime4"
                << "typetimestamp";
        }

        static QStringList getFieldsWithoutAutoIncrement() {
            return QStringList()
                << "typetime"
                << "typetime2"
                << "typetime3"
                << "typetime4"
                << "typedate"
                << "typedate2"
                << "typedate3"
                << "typedate4"
                << "typedatetime"
                << "typedatetime2"
                << "typedatetime3"
                << "typedatetime4"
                << "typetimestamp";
        }

        static QStringList getFieldsType() {
            return QStringList() 
                << QStringLiteral("typetime time(3) null default '12:59:59.678'")
                << QStringLiteral("typetime2 time null default null")
                << QStringLiteral("typetime3 time null default getdate()")
                << QStringLiteral("typetime4 time null default null")
                << QStringLiteral("typedate date null default '2020-01-01'")
                << QStringLiteral("typedate2 date null default null")
                << QStringLiteral("typedate3 date null default getdate()")
                << QStringLiteral("typedate4 date null default null")
                << QStringLiteral("typedatetime datetime(3) null default '2020-01-01 12:59:59.678'")
                << QStringLiteral("typedatetime2 datetime2 null default null")
                << QStringLiteral("typedatetime3 datetimeoffset null default getdate()")
                << QStringLiteral("typedatetime4 datetime null default null")
                << QStringLiteral("typetimestamp timestamp null default null");
        }

        static QStringList getPrimaryKeys() {
            return QStringList();
        }

        static QList<QStringList> getIndexFields() {
            return QList<QStringList>();
        }

        static QList<QStringList> getUniqueIndexFields() {
            return QList<QStringList>();
        }

        static bool isAutoIncrement(const QString& name) {
            Q_UNUSED(name);
            return false;
        }
    };

    struct Tool {
        static QVariantList getValueWithoutAutoIncrement(const SqlServerDefaultTestTime& entity) {
            return QVariantList()
                << entity.typetime
                << entity.typetime2
                << entity.typetime3
                << entity.typetime4
                << entity.typedate
                << entity.typedate2
                << entity.typedate3
                << entity.typedate4
                << entity.typedatetime
                << entity.typedatetime2
                << entity.typedatetime3
                << entity.typedatetime4
                << entity.typetimestamp;
        }

        static QVariant getValueByName(const SqlServerDefaultTestTime& entity, const QString& target) {
            if (target == "typetime") {
                return entity.typetime;
            }
            if (target == "typetime2") {
                return entity.typetime2;
            }
            if (target == "typetime3") {
                return entity.typetime3;
            }
            if (target == "typetime4") {
                return entity.typetime4;
            }
            if (target == "typedate") {
                return entity.typedate;
            }
            if (target == "typedate2") {
                return entity.typedate2;
            }
            if (target == "typedate3") {
                return entity.typedate3;
            }
            if (target == "typedate4") {
                return entity.typedate4;
            }
            if (target == "typedatetime") {
                return entity.typedatetime;
            }
            if (target == "typedatetime2") {
                return entity.typedatetime2;
            }
            if (target == "typedatetime3") {
                return entity.typedatetime3;
            }
            if (target == "typedatetime4") {
                return entity.typedatetime4;
            }
            if (target == "typetimestamp") {
                return entity.typetimestamp;
            }
            return entity.__extra.value(target);
        }

        static void bindAutoIncrementId(SqlServerDefaultTestTime& entity, const QVariant& id) {
            Q_UNUSED(entity);
            Q_UNUSED(id);
        }

        static void bindValue(SqlServerDefaultTestTime& entity, const QString& target, QVariant value) {
            if (target == "typetime") {
                entity.typetime = value.value<QTime>();
            } else if (target == "typetime2") {
                entity.typetime2 = value.value<QTime>();
            } else if (target == "typetime3") {
                entity.typetime3 = value.value<QTime>();
            } else if (target == "typetime4") {
                entity.typetime4 = value.value<QTime>();
            } else if (target == "typedate") {
                entity.typedate = value.value<QDate>();
            } else if (target == "typedate2") {
                entity.typedate2 = value.value<QDate>();
            } else if (target == "typedate3") {
                entity.typedate3 = value.value<QDate>();
            } else if (target == "typedate4") {
                entity.typedate4 = value.value<QDate>();
            } else if (target == "typedatetime") {
                entity.typedatetime = value.value<QDateTime>();
            } else if (target == "typedatetime2") {
                entity.typedatetime2 = value.value<QDateTime>();
            } else if (target == "typedatetime3") {
                entity.typedatetime3 = value.value<QDateTime>();
            } else if (target == "typedatetime4") {
                entity.typedatetime4 = value.value<QDateTime>();
            } else if (target == "typetimestamp") {
                entity.typetimestamp = value.value<QByteArray>();
            } else {
                entity.__putExtra(target, value);
            }
        }

        static SqlServerDefaultTestTime fromJson(const QJsonObject& object) {
            SqlServerDefaultTestTime entity;
            entity.typetime = QTime::fromString(object.value("typetime").toString(), "HH:mm:ss");
            entity.typetime2 = QTime::fromString(object.value("typetime2").toString(), "HH:mm:ss");
            entity.typetime3 = QTime::fromString(object.value("typetime3").toString(), "HH:mm:ss");
            entity.typetime4 = QTime::fromString(object.value("typetime4").toString(), "HH:mm:ss");
            entity.typedate = QDate::fromString(object.value("typedate").toString(), "yyyy-MM-dd");
            entity.typedate2 = QDate::fromString(object.value("typedate2").toString(), "yyyy-MM-dd");
            entity.typedate3 = QDate::fromString(object.value("typedate3").toString(), "yyyy-MM-dd");
            entity.typedate4 = QDate::fromString(object.value("typedate4").toString(), "yyyy-MM-dd");
            entity.typedatetime = QDateTime::fromString(object.value("typedatetime").toString(), "yyyy-MM-dd HH:mm:ss");
            entity.typedatetime2 = QDateTime::fromString(object.value("typedatetime2").toString(), "yyyy-MM-dd HH:mm:ss");
            entity.typedatetime3 = QDateTime::fromString(object.value("typedatetime3").toString(), "yyyy-MM-dd HH:mm:ss");
            entity.typedatetime4 = QDateTime::fromString(object.value("typedatetime4").toString(), "yyyy-MM-dd HH:mm:ss");
            entity.typetimestamp = QByteArray::fromBase64(object.value("typetimestamp").toString().toLatin1());
            return entity;
        }

        static QJsonObject toJson(const SqlServerDefaultTestTime& entity, QStringList excludeKeys = QStringList()) {
            QJsonObject object;
            object.insert("typetime", entity.typetime.toString("HH:mm:ss"));
            object.insert("typetime2", entity.typetime2.toString("HH:mm:ss"));
            object.insert("typetime3", entity.typetime3.toString("HH:mm:ss"));
            object.insert("typetime4", entity.typetime4.toString("HH:mm:ss"));
            object.insert("typedate", entity.typedate.toString("yyyy-MM-dd"));
            object.insert("typedate2", entity.typedate2.toString("yyyy-MM-dd"));
            object.insert("typedate3", entity.typedate3.toString("yyyy-MM-dd"));
            object.insert("typedate4", entity.typedate4.toString("yyyy-MM-dd"));
            object.insert("typedatetime", entity.typedatetime.toString("yyyy-MM-dd HH:mm:ss"));
            object.insert("typedatetime2", entity.typedatetime2.toString("yyyy-MM-dd HH:mm:ss"));
            object.insert("typedatetime3", entity.typedatetime3.toString("yyyy-MM-dd HH:mm:ss"));
            object.insert("typedatetime4", entity.typedatetime4.toString("yyyy-MM-dd HH:mm:ss"));
            object.insert("typetimestamp", QString::fromLatin1(entity.typetimestamp.toBase64()));

            for (const auto& key : excludeKeys) {
                object.remove(key);
            }
            return object;
        }
    };

public:
    //
    inline void setTypetime(const QTime& typetime) {this->typetime = typetime;}
    //
    inline QTime getTypetime() const {return typetime;}
    //
    inline void setTypetime2(const QTime& typetime2) {this->typetime2 = typetime2;}
    //
    inline QTime getTypetime2() const {return typetime2;}
    //
    inline void setTypetime3(const QTime& typetime3) {this->typetime3 = typetime3;}
    //
    inline QTime getTypetime3() const {return typetime3;}
    //
    inline void setTypetime4(const QTime& typetime4) {this->typetime4 = typetime4;}
    //
    inline QTime getTypetime4() const {return typetime4;}
    //
    inline void setTypedate(const QDate& typedate) {this->typedate = typedate;}
    //
    inline QDate getTypedate() const {return typedate;}
    //
    inline void setTypedate2(const QDate& typedate2) {this->typedate2 = typedate2;}
    //
    inline QDate getTypedate2() const {return typedate2;}
    //
    inline void setTypedate3(const QDate& typedate3) {this->typedate3 = typedate3;}
    //
    inline QDate getTypedate3() const {return typedate3;}
    //
    inline void setTypedate4(const QDate& typedate4) {this->typedate4 = typedate4;}
    //
    inline QDate getTypedate4() const {return typedate4;}
    //
    inline void setTypedatetime(const QDateTime& typedatetime) {this->typedatetime = typedatetime;}
    //
    inline QDateTime getTypedatetime() const {return typedatetime;}
    //
    inline void setTypedatetime2(const QDateTime& typedatetime2) {this->typedatetime2 = typedatetime2;}
    //
    inline QDateTime getTypedatetime2() const {return typedatetime2;}
    //
    inline void setTypedatetime3(const QDateTime& typedatetime3) {this->typedatetime3 = typedatetime3;}
    //
    inline QDateTime getTypedatetime3() const {return typedatetime3;}
    //
    inline void setTypedatetime4(const QDateTime& typedatetime4) {this->typedatetime4 = typedatetime4;}
    //
    inline QDateTime getTypedatetime4() const {return typedatetime4;}
    //
    inline void setTypetimestamp(const QByteArray& typetimestamp) {this->typetimestamp = typetimestamp;}
    //
    inline QByteArray getTypetimestamp() const {return typetimestamp;}
    //set temp data
    inline void __putExtra(const QString& key, const QVariant& extra) {this->__extra.insert(key, extra);}
    //get function select result, like get "as" field result
    inline QVariant __getExtra(const QString& key) const {return __extra.value(key);}
};
typedef QList<SqlServerDefaultTestTime> SqlServerDefaultTestTimeList;
Q_DECLARE_METATYPE(SqlServerDefaultTestTime);